{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/classes/fruitdinosaur.ts","src/classes/human.ts","src/classes/vegdinosaur.ts","src/main.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","FruityDinosaur","human","this","subscribe","prototype","update","obj","dinosaurSpeak","document","getElementById","type","innerHTML","name","removeSubscription","unsubscribe","destroy","Human","list","context","push","index","findIndex","value","splice","notify","forEach","item","VeggyDinosaur","renderDOM","foodItems","getElementsByClassName","addEventListener","showFruitDetails","target","id","human_1","fruitdinosaur_1","vegdinosaur_1"],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import { ISubject } from '../interfaces/ISubject';\nimport { ISubscriber}  from '../interfaces/ISubscriber';\n\nexport class FruityDinosaur implements ISubscriber{\n    human:ISubject;\n\n    /**\n     * Constructor method where the dino class is using the subscribe method provided by human\n     * to subscribe itself to the list array present in the human class\n     * @param human \n     */\n     constructor(human:ISubject){\n        this.human = human;\n        this.human.subscribe(this);\n    }\n\n    /**\n     * Update method that will deal with the notification coming from the subject human class\n     * Depending on the notification is fruit or veggie, the talk bubble will display the text\n     * @param obj \n     */\n    public update(obj:any){\n       var dinosaurSpeak = document.getElementById(\"fruityDino\");\n        if(obj.type == \"fruit\"){\n            dinosaurSpeak.innerHTML = \"The<strong> \" + obj.name + \"</strong> was Yummy!!!\"\n        }\n        else {\n            dinosaurSpeak.innerHTML = \"I don't like veggies! Feed me a fruit!!!\"\n        }\n    }\n\n    /**\n     * RemoveSubscription will call the unsubcribe method of the human class and the \n     * Dino will no longer be able to receive notifications from the human class\n     */\n    private removeSubscription(){\n        this.human.unsubscribe(this);\n    }\n\n    /**\n     * Destroy will call the remove subscription method of Dino class\n     */\n    public destroy(){\n        this.removeSubscription();\n    }\n}","import { ISubject } from '../interfaces/ISubject';\nimport { ISubscriber}  from '../interfaces/ISubscriber';\n\nexport class Human implements ISubject{\n\n    list:Array<ISubscriber> = [];\n  \n    public subscribe(context:ISubscriber){\n        this.list.push(context);\n    }\n\n    public unsubscribe(context:ISubscriber){\n        var index = this.list.findIndex((value:ISubscriber) => {\n            return value == context;\n        });\n        this.list.splice(index,1);\n    }\n\n    public notify(obj:any){\n        this.list.forEach(function(item:ISubscriber){\n            item.update(obj);\n        })\n    }\n\n}","import { ISubject } from '../interfaces/ISubject';\nimport { ISubscriber}  from '../interfaces/ISubscriber';\n\nexport class VeggyDinosaur implements ISubscriber{\n    human:ISubject;\n\n    /**\n     * Constructor method where the dino class is using the subscribe method provided by human\n     * to subscribe itself to the list array present in the human class\n     * @param human \n     */\n    constructor(human:ISubject){\n        this.human = human;\n        this.human.subscribe(this);\n    }\n\n    /**\n     * Update method that will deal with the notification coming from the subject human class\n     * Depending on the notification is fruit or veggie, the talk bubble will display the text\n     * @param obj \n     */\n    public update(obj:any){\n        var dinosaurSpeak = document.getElementById(\"veggieDino\");\n        if(obj.type == \"veggie\"){\n            dinosaurSpeak.innerHTML = \"The<strong> \" + obj.name + \"</strong> was Yummy!!!\"\n        }\n        else {\n            dinosaurSpeak.innerHTML = \"I don't like fruits! Feed me a veggie!!!\"\n        }\n    }\n\n    /**\n     * RemoveSubscription will call the unsubcribe method of the human class and the \n     * Dino will no longer be able to receive notifications from the human class\n     */\n    private removeSubscription(){\n        this.human.unsubscribe(this);\n    }\n\n    /**\n     * Destroy will call the remove subscription method of Dino class\n     */\n    public destroy(){\n        this.removeSubscription();\n    }\n}","import { Human } from './classes/human';\nimport { FruityDinosaur } from './classes/fruitdinosaur';\nimport { VeggyDinosaur } from './classes/vegdinosaur';\n\ndocument.addEventListener(\"DOMContentLoaded\", renderDOM)\n\nfunction renderDOM(){\n    var foodItems = document.getElementsByClassName(\"food-items\");\n\n    //Creates an array of all the fruits and veggies btns from the DOM and attaches the \n    //click event with function showFruitDetails \n    for(var i =0; i<foodItems.length; i++){\n        foodItems[i].addEventListener(\"click\", showFruitDetails)\n    }\n}\n\nvar human:Human = new Human();\nvar fruityDinosaur:FruityDinosaur = new FruityDinosaur(human);\nvar veggieDinosaur:VeggyDinosaur = new VeggyDinosaur(human);\n\n/**\n * showFruitsDetails will send notification object with type and fruit/veggie using the \n * notify method from the human class\n * The notify method will inturn call the update method of the dinosaurs and pass \n * the notification to them for further dealing. \n * @param e: specifies the button that was clicked.\n */\nfunction showFruitDetails(e){\n    var clickedBtn = e.target.id;\n\n    switch(clickedBtn){\n        case \"orange\":\n            human.notify({type:\"fruit\",name:\"Orange\"}); \n            break;\n        case \"lemon\":\n            human.notify({type:\"fruit\",name:\"Lemon\"}); \n            break;\n        case \"pomgranate\":\n            human.notify({type:\"fruit\",name:\"Pomgranate\"}); \n            break;\n        case \"apple\":\n            human.notify({type:\"fruit\",name:\"Apple\"}); \n            break;\n        case \"pears\":\n            human.notify({type:\"fruit\",name:\"Pears\"}); \n            break;\n        case \"carrot\":\n            human.notify({type:\"veggie\",name:\"Carrot\"}); \n            break;\n        case \"chilli\":\n            human.notify({type:\"veggie\",name:\"Chilli\"}); \n            break;\n        case \"brinjal\":\n            human.notify({type:\"veggie\",name:\"Brinjal\"}); \n            break;\n        case \"broccoli\":\n            human.notify({type:\"veggie\",name:\"Broccoli\"}); \n            break;\n        case \"tomato\":\n            human.notify({type:\"veggie\",name:\"Tomato\"}); \n            break;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n"]}